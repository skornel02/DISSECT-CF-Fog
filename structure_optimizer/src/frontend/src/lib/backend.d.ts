/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/simulations/random": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["runSimulation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/simulations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getSimulation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ComputerInstance: {
            computerSpecification?: string;
            regionSpecification?: string;
        };
        ComputerSpecification: {
            name?: string;
            /** Format: double */
            cores?: number;
            /** Format: double */
            processingPerTick?: number;
            /** Format: int64 */
            memory?: number;
        };
        RegionConnection: {
            from?: string;
            to?: string;
            /** Format: int32 */
            latency?: number;
        };
        RegionSpecification: {
            name?: string;
            /** Format: double */
            latitude?: number;
            /** Format: double */
            longitude?: number;
            /** Format: int32 */
            interRegionLatency?: number;
        };
        SimulationStructure: {
            computerTypes?: components["schemas"]["ComputerSpecification"][];
            regions?: components["schemas"]["RegionSpecification"][];
            instances?: components["schemas"]["ComputerInstance"][];
            regionConnections?: components["schemas"]["RegionConnection"][];
            /** Format: int32 */
            defaultLatency?: number;
        };
        SimulationStartedDto: {
            guid: string;
        };
        SimulationModel: {
            id?: string;
            /** @enum {string} */
            status?: "Waiting" | "Processing" | "Finished";
            /** Format: int32 */
            cloudCount?: number;
            result?: components["schemas"]["SimulationResult"];
        };
        SimulationResult: {
            id: string;
            resultDirectory: string;
            logs: string;
            /** Format: double */
            totalCost: number;
            /** Format: double */
            totalEnergyConsumption: number;
            /** Format: int64 */
            executionTime: number;
            /** Format: int32 */
            totalTasks: number;
            /** Format: int32 */
            completedTasks: number;
            errorMessage?: string;
            errorStackTrace?: string;
        };
        SimulationStatusDto: {
            id: string;
            type: string;
            isRunning: boolean;
            simulations: components["schemas"]["SimulationModel"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type SchemaComputerInstance = components['schemas']['ComputerInstance'];
export type SchemaComputerSpecification = components['schemas']['ComputerSpecification'];
export type SchemaRegionConnection = components['schemas']['RegionConnection'];
export type SchemaRegionSpecification = components['schemas']['RegionSpecification'];
export type SchemaSimulationStructure = components['schemas']['SimulationStructure'];
export type SchemaSimulationStartedDto = components['schemas']['SimulationStartedDto'];
export type SchemaSimulationModel = components['schemas']['SimulationModel'];
export type SchemaSimulationResult = components['schemas']['SimulationResult'];
export type SchemaSimulationStatusDto = components['schemas']['SimulationStatusDto'];
export type $defs = Record<string, never>;
export interface operations {
    runSimulation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SimulationStructure"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SimulationStartedDto"];
                };
            };
        };
    };
    getSimulation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SimulationStatusDto"];
                };
            };
        };
    };
}
